================================================================================
                            ISOLDERTHAN - HELP DOCUMENTATION
                             File Age Verification Tool
                                   Version 1.0
                                  June 2025
================================================================================

NAME
    isOlderThan.exe - Check if a file is older than specified time period

SYNOPSIS
    isOlderThan.exe <filepath> [options]

DESCRIPTION
    isOlderThan checks whether a file is older than a specified time period.
    The program compares the file's modification time against a reference time
    calculated from the current time minus the specified age threshold.

    By default, if no time specification is provided, the program checks if
    the file is older than 6 months.

    The reference time calculation can use either the exact current time
    (with -exact) or the end of the previous day (default behavior).

    The program features enhanced input validation, comprehensive error handling,
    and optimized performance for batch processing operations.

REQUIRED PARAMETER
    <filepath>      Path to the file to check
                    Can be absolute (C:\path\to\file.txt) or relative (file.txt)
                    Supports both forward slashes (/) and backslashes (\)
                    Handles Unicode filenames and long paths
                    Use quotes for paths with spaces: "C:\Program Files\file.txt"

OPTIONAL TIME PARAMETERS
    -days <count>   Number of days
                    Excludes all other time parameters (-weeks, -months, -years)
                    Range: 1-365000 (approximately 1000 years)
                    Example: -days 30

    -weeks <count>  Number of weeks
                    Excludes all other time parameters (-days, -months, -years)
                    Range: 1-52000 (approximately 1000 years)
                    Example: -weeks 4

    -months <count> Number of months
                    Can be combined with -years (maximum 11 when combined)
                    When used alone, range: 1-12000 (approximately 1000 years)
                    Example: -months 6

    -years <count>  Number of years
                    Can be combined with -months
                    Range: 1-1000 for practical usage and system compatibility
                    Example: -years 2

TIME REFERENCE MODE
    -exact          Use exact current program execution time as reference
                    Default: uses end of previous day as reference

PARAMETER RULES
    • -days excludes all other time parameters
    • -weeks excludes all other time parameters
    • -months can only be combined with -years
    • When -months and -years are combined, months must be ≤ 11
    • Default behavior: end of previous day reference time
    • -exact mode: current program execution time reference
    • All numeric values must be positive integers
    • Leading zeros in numbers are permitted (e.g., "030" = 30)

INPUT VALIDATION
    Enhanced validation ensures robust parameter handling:
    • Numeric parameters must be pure numbers (leading zeros OK)
    • Mixed strings like "30abc" are rejected with clear error messages
    • Automatic overflow detection for extremely large values
    • Practical range limits: years 1-1000, other parameters similarly bounded
    • Improved error messages specify exactly what went wrong

TIME CALCULATION
    The program performs accurate calendar arithmetic, properly handling:
    • Leap years according to Gregorian calendar rules
    • Variable month lengths (28-31 days)
    • February 29 boundary conditions in non-leap years
    • Year and month overflow normalization
    • Iterative calculation for very large year values (>100) to prevent overflow
    • Safe handling of extreme dates spanning centuries

EXIT CODES
    0   File is older than specified period (success)
    1   Invalid arguments or file is not older than specified period
    2   File not found
    3   File access error (permissions, I/O error)
    4   Invalid parameter combination
    5   Invalid parameter value (negative numbers, overflow, non-numeric input)

EXAMPLES

    Basic Usage:
    ------------
    Check if file is older than default 6 months:
        isOlderThan.exe C:\temp\myfile.txt

    Check if file is older than 30 days:
        isOlderThan.exe C:\Documents\report.doc -days 30

    Check if file is older than 2 weeks:
        isOlderThan.exe .\backup.zip -weeks 2

    Check if file is older than 1 year and 6 months:
        isOlderThan.exe "C:\Program Files\app\config.ini" -years 1 -months 6

    Check with exact current time reference:
        isOlderThan.exe C:\logs\app.log -months 3 -exact

    Batch Script Usage:
    ------------------
    @echo off
    isOlderThan.exe "C:\temp\cache.dat" -days 7
    if %ERRORLEVEL% == 0 (
        del "C:\temp\cache.dat"
        echo Removed old cache file
    ) else if %ERRORLEVEL% == 1 (
        echo Cache file is still current
    ) else (
        echo Error accessing cache file
    )

    Advanced Batch Processing:
    -------------------------
    @echo off
    setlocal enabledelayedexpansion
    for %%F in (C:\logs\*.log) do (
        isOlderThan.exe "%%F" -weeks 2 >nul 2>nul
        if !ERRORLEVEL! == 0 (
            echo Archiving old log: %%F
            powershell Compress-Archive "%%F" "%%F.zip"
            del "%%F"
        ) else if !ERRORLEVEL! == 2 (
            echo Warning: Cannot access %%F
        )
    )

    PowerShell Usage:
    ----------------
    # Basic usage with error handling
    if (& .\isOlderThan.exe "C:\logs\debug.log" -days 30) {
        Remove-Item "C:\logs\debug.log"
        Write-Host "Removed old debug log"
    }

    # Advanced batch processing with error handling
    Get-ChildItem "C:\Logs\*.log" | ForEach-Object {
        $result = & .\isOlderThan.exe $_.FullName -weeks 2
        switch ($LASTEXITCODE) {
            0 {
                Write-Host "Archiving old log: $($_.Name)" -ForegroundColor Yellow
                Compress-Archive $_.FullName "$($_.FullName).zip"
                Remove-Item $_.FullName
            }
            1 { Write-Host "Current log: $($_.Name)" -ForegroundColor Green }
            2 { Write-Warning "Cannot access: $($_.Name)" }
            default { Write-Error "Unexpected error with: $($_.Name)" }
        }
    }

    # Backup validation script
    $backups = @("C:\Backups\daily.bak", "C:\Backups\weekly.bak")
    $alertRequired = $false
    foreach ($backup in $backups) {
        if (& .\isOlderThan.exe $backup -days 7) {
            Write-Error "ALERT: Backup $backup is older than 7 days!"
            $alertRequired = $true
        }
    }
    if (-not $alertRequired) {
        Write-Host "All backups are current" -ForegroundColor Green
    }

    # Cleanup with size reporting
    Get-ChildItem "C:\temp\cache\*.cache" | ForEach-Object {
        if (& .\isOlderThan.exe $_.FullName -days 30) {
            $sizeMB = [math]::Round($_.Length / 1MB, 2)
            Remove-Item $_.FullName
            Write-Host "Deleted: $($_.Name) ($sizeMB MB)"
        }
    }

ENHANCED ERROR MESSAGES
    Specific Messages for Common Issues:
    --------------------------------------------------------------------------------
    "Error: -days value must be a number"
        → The value after -days contains non-numeric characters
        → Example: "isOlderThan file.txt -days abc"
        → Solution: Use pure numbers like "isOlderThan file.txt -days 30"

    "Error: -days value out of range (1-365000)"
        → The number is too large for the system to handle
        → Example: "isOlderThan file.txt -days 99999999999999999999"
        → Solution: Use reasonable values (1 to ~365000 for days)

    "Error: Mixed string '30abc' not allowed"
        → The parameter contains both numbers and letters
        → Example: "isOlderThan file.txt -days 30abc"
        → Solution: Use only numbers: "isOlderThan file.txt -days 30"

    "Error: -years value out of range (1-1000)"
        → Years must be between 1 and 1000 for practical usage
        → Example: "isOlderThan file.txt -years 2000"
        → Solution: Use values between 1-1000: "isOlderThan file.txt -years 10"

    "Error: Cannot calculate reference time (values too extreme)"
        → The calculated date would be outside valid range
        → Example: Very large combinations that exceed system limits
        → Solution: Use more moderate time periods

    "Error: File not found: C:\path\to\file.txt"
        → The specified file does not exist
        → Solution: Check the file path and ensure file exists

    "Error: Cannot access file: C:\file.txt (Access is denied)"
        → Insufficient permissions to read the file
        → Solution: Run as Administrator or check file permissions

PERFORMANCE CONSIDERATIONS
    Memory Efficiency:
    -----------------
    • Optimized for minimal memory usage in batch operations
    • No memory leaks when processing large numbers of files
    • Efficient handling of very large time values

    Batch Processing:
    ----------------
    • Suitable for processing hundreds of files in loops
    • Fast execution: typically processes 50+ files per second
    • Consistent performance regardless of file age calculations

    Large Time Values:
    -----------------
    • Years > 100 use optimized iterative calculation
    • Prevents arithmetic overflow in extreme scenarios
    • Safe handling of dates spanning centuries

    Network Drives:
    --------------
    • May experience slower performance on network-mounted drives
    • Consider local processing for large batch operations
    • Use error handling for network timeout scenarios

TECHNICAL DETAILS

    Calendar Arithmetic:
    -------------------
    The program implements proper calendar arithmetic:
    • Leap year calculation: (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)
    • Month addition handles varying month lengths correctly
    • February 29 dates are adjusted to February 28 in non-leap years
    • All calculations use local system timezone and respect DST changes
    • Overflow protection for extreme date calculations

    File Time Retrieval:
    -------------------
    File modification times are retrieved using Windows-compatible stat() calls,
    ensuring proper handling of NTFS timestamps and timezone information.

    Input Validation:
    ----------------
    Enhanced validation using strtol() provides:
    • Complete string validation (detects mixed alphanumeric input)
    • Overflow detection for values exceeding system limits
    • Proper error reporting with specific error messages
    • Leading zero handling without octal interpretation

    Path Handling:
    -------------
    • Supports both Windows backslash (\) and Unix forward slash (/) separators
    • Handles long file paths and Unicode filenames
    • Properly processes quoted paths with spaces
    • UTF-8 filename support for international characters

DEBUGGING AND TROUBLESHOOTING

    Debug Information:
    -----------------
    If compiled with DEBUG support, additional information is available:
    • Detailed argument parsing steps
    • File time calculation breakdowns
    • Reference time computation details
    • Calendar arithmetic verification
    • Memory allocation and cleanup tracking

    Common Issues:
    -------------
    • "File not found" - Check file path and ensure file exists
    • "File access error" - Verify read permissions on the file
    • "Invalid parameter combination" - Review parameter rules above
    • "Invalid parameter value" - Ensure all numeric values are positive

    Path Issues:
    -----------
    • Use quotes around paths containing spaces: "C:\Program Files\file.txt"
    • Both forward slashes and backslashes work: C:/temp/file.txt
    • Relative paths work from current directory: .\subfolder\file.txt
    • Long path support available for paths > 260 characters

    Permission Issues:
    -----------------
    • Run Command Prompt as Administrator if accessing system files
    • Ensure the file is not locked by another application
    • Check NTFS permissions on the target file
    • Verify antivirus software is not blocking access

    Performance Issues:
    ------------------
    • Very large time values may cause slower calculation
    • Extreme years (>1000) are limited for practical reasons
    • Network drives may slow file access operations
    • Consider batch size limits for very large operations

    Batch Processing Tips:
    ---------------------
    • Use error code checking in loops: if %ERRORLEVEL% == 0
    • Redirect stderr to log files for error tracking: 2>>error.log
    • Test with small file sets before large batch operations
    • Consider timeout values for network-mounted files
    • Use PowerShell for complex batch operations with better error handling

INSTALLATION

    Manual Installation:
    -------------------
    1. Copy isOlderThan.exe to a directory in your PATH
       (e.g., C:\Windows\System32 or C:\Program Files\isOlderThan\)
    
    2. Copy this help file to the same directory

    3. Optionally add the installation directory to your PATH environment variable

    Using Make (with MinGW/MSYS2):
    ------------------------------
    make install-windows

    Installer Package:
    -----------------
    Use the provided Windows installer (.msi or .exe) for automatic installation
    with PATH configuration and Start Menu integration.

DEVELOPMENT INFORMATION
    Source Code:
    -----------
    • Complete Xcode project with professional structure
    • Cross-platform Makefile for Windows/MinGW compilation
    • Static library target for embedding in other applications

    Testing:
    -------
    • Comprehensive unit test suite (100+ tests)
    • Integration tests with real file scenarios
    • Performance tests for batch operations
    • Memory leak detection and validation
    • Unicode filename and special character testing

    Build Targets:
    -------------
    • Command-line tool (main executable)
    • Static library (libIsOlderThanLib.a for MinGW)
    • Unit test bundle (XCTest framework on macOS)
    • Windows installer packages (.msi, .exe)

    Library Integration:
    -------------------
    • Header file (isOlderThan.h) available for C/C++ integration
    • Static library can be linked into other Windows applications
    • Function exports available for DLL integration
    • COM interface available for advanced Windows integration

ENVIRONMENT
    The program respects Windows timezone settings and regional configurations
    for accurate time calculations. Environment variables affecting timezone
    and locale are honored.

COMPATIBILITY
    • Windows 7 and later
    • Windows Server 2008 R2 and later
    • Both 32-bit and 64-bit architectures
    • Compatible with Command Prompt, PowerShell, and batch scripts
    • Works with Windows Subsystem for Linux (WSL)
    • Compatible with MinGW and Visual Studio compilation

FILES
    isOlderThan.exe     - Main executable
    isOlderThan.txt     - This help file (recommended location: same directory)
    isOlderThan.h       - Header file for library integration (development package)
    libIsOlderThanLib.a - Static library (development package)

AUTHOR
    Written as a cross-platform file age verification tool following C99 standards.
    Compiled for Windows using MinGW-w64 with enhanced Windows compatibility.

COPYRIGHT
    This program is provided as-is for educational and practical use.
    See LICENSE file in source distribution for complete terms.

RELATED TOOLS
    forfiles   - Windows built-in tool for file operations based on date
    robocopy   - Advanced file copying with date filtering
    dir        - List directory contents with date information
    attrib     - Display/modify file attributes
    where      - Locate files in PATH
    find       - Search for files (limited date functionality)
    powershell - Advanced scripting with comprehensive file operations

FOR MORE INFORMATION
    Visit the project repository for source code, additional documentation,
    build instructions, and updates.

VERSION HISTORY
    Version 1.0 - Initial release with enhanced input validation, comprehensive
                  error handling, performance optimizations, and professional
                  documentation suitable for enterprise deployment.

SUPPORT
    For technical support:
    • Check this help file for common solutions
    • Review error messages for specific guidance
    • Test with simple cases before complex batch operations
    • Include complete error output when reporting issues

================================================================================
                              END OF HELP FILE
================================================================================
